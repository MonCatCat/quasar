// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qoracle/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/quasarlabs/quasarnode/osmosis/epochs/types"
	types2 "github.com/quasarlabs/quasarnode/osmosis/mint/types"
	types3 "github.com/quasarlabs/quasarnode/osmosis/pool-incentives/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryStateRequest struct {
}

func (m *QueryStateRequest) Reset()         { *m = QueryStateRequest{} }
func (m *QueryStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStateRequest) ProtoMessage()    {}
func (*QueryStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{2}
}
func (m *QueryStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStateRequest.Merge(m, src)
}
func (m *QueryStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStateRequest proto.InternalMessageInfo

type QueryStateResponse struct {
	CoinRatesState                OracleScriptState   `protobuf:"bytes,1,opt,name=coin_rates_state,json=coinRatesState,proto3" json:"coin_rates_state"`
	OsmosisParamsRequestState     OsmosisRequestState `protobuf:"bytes,2,opt,name=osmosis_params_request_state,json=osmosisParamsRequestState,proto3" json:"osmosis_params_request_state"`
	OsmosisIncentivizedPoolsState OsmosisRequestState `protobuf:"bytes,3,opt,name=osmosis_incentivized_pools_state,json=osmosisIncentivizedPoolsState,proto3" json:"osmosis_incentivized_pools_state"`
	OsmosisPoolsState             OsmosisRequestState `protobuf:"bytes,4,opt,name=osmosis_pools_state,json=osmosisPoolsState,proto3" json:"osmosis_pools_state"`
}

func (m *QueryStateResponse) Reset()         { *m = QueryStateResponse{} }
func (m *QueryStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStateResponse) ProtoMessage()    {}
func (*QueryStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{3}
}
func (m *QueryStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStateResponse.Merge(m, src)
}
func (m *QueryStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStateResponse proto.InternalMessageInfo

func (m *QueryStateResponse) GetCoinRatesState() OracleScriptState {
	if m != nil {
		return m.CoinRatesState
	}
	return OracleScriptState{}
}

func (m *QueryStateResponse) GetOsmosisParamsRequestState() OsmosisRequestState {
	if m != nil {
		return m.OsmosisParamsRequestState
	}
	return OsmosisRequestState{}
}

func (m *QueryStateResponse) GetOsmosisIncentivizedPoolsState() OsmosisRequestState {
	if m != nil {
		return m.OsmosisIncentivizedPoolsState
	}
	return OsmosisRequestState{}
}

func (m *QueryStateResponse) GetOsmosisPoolsState() OsmosisRequestState {
	if m != nil {
		return m.OsmosisPoolsState
	}
	return OsmosisRequestState{}
}

type QueryOraclePricesRequest struct {
}

func (m *QueryOraclePricesRequest) Reset()         { *m = QueryOraclePricesRequest{} }
func (m *QueryOraclePricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOraclePricesRequest) ProtoMessage()    {}
func (*QueryOraclePricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{4}
}
func (m *QueryOraclePricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOraclePricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOraclePricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOraclePricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOraclePricesRequest.Merge(m, src)
}
func (m *QueryOraclePricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOraclePricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOraclePricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOraclePricesRequest proto.InternalMessageInfo

type QueryOraclePricesResponse struct {
	Prices          github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=prices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"prices"`
	UpdatedAtHeight int64                                       `protobuf:"varint,2,opt,name=updated_at_height,json=updatedAtHeight,proto3" json:"updated_at_height,omitempty"`
}

func (m *QueryOraclePricesResponse) Reset()         { *m = QueryOraclePricesResponse{} }
func (m *QueryOraclePricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOraclePricesResponse) ProtoMessage()    {}
func (*QueryOraclePricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{5}
}
func (m *QueryOraclePricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOraclePricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOraclePricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOraclePricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOraclePricesResponse.Merge(m, src)
}
func (m *QueryOraclePricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOraclePricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOraclePricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOraclePricesResponse proto.InternalMessageInfo

func (m *QueryOraclePricesResponse) GetPrices() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *QueryOraclePricesResponse) GetUpdatedAtHeight() int64 {
	if m != nil {
		return m.UpdatedAtHeight
	}
	return 0
}

type QueryOsmosisChainParamsRequest struct {
}

func (m *QueryOsmosisChainParamsRequest) Reset()         { *m = QueryOsmosisChainParamsRequest{} }
func (m *QueryOsmosisChainParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOsmosisChainParamsRequest) ProtoMessage()    {}
func (*QueryOsmosisChainParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{6}
}
func (m *QueryOsmosisChainParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOsmosisChainParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOsmosisChainParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOsmosisChainParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOsmosisChainParamsRequest.Merge(m, src)
}
func (m *QueryOsmosisChainParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOsmosisChainParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOsmosisChainParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOsmosisChainParamsRequest proto.InternalMessageInfo

type QueryOsmosisChainParamsResponse struct {
	EpochsInfo          []types1.EpochInfo                     `protobuf:"bytes,1,rep,name=epochs_info,json=epochsInfo,proto3" json:"epochs_info"`
	LockableDurations   []time.Duration                        `protobuf:"varint,2,rep,packed,name=lockable_durations,json=lockableDurations,proto3,casttype=time.Duration" json:"lockable_durations,omitempty"`
	MintParams          types2.Params                          `protobuf:"bytes,3,opt,name=mint_params,json=mintParams,proto3" json:"mint_params"`
	MintEpochProvisions github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=mint_epoch_provisions,json=mintEpochProvisions,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mint_epoch_provisions"`
	DistrInfo           types3.DistrInfo                       `protobuf:"bytes,5,opt,name=distr_info,json=distrInfo,proto3" json:"distr_info"`
}

func (m *QueryOsmosisChainParamsResponse) Reset()         { *m = QueryOsmosisChainParamsResponse{} }
func (m *QueryOsmosisChainParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOsmosisChainParamsResponse) ProtoMessage()    {}
func (*QueryOsmosisChainParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{7}
}
func (m *QueryOsmosisChainParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOsmosisChainParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOsmosisChainParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOsmosisChainParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOsmosisChainParamsResponse.Merge(m, src)
}
func (m *QueryOsmosisChainParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOsmosisChainParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOsmosisChainParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOsmosisChainParamsResponse proto.InternalMessageInfo

func (m *QueryOsmosisChainParamsResponse) GetEpochsInfo() []types1.EpochInfo {
	if m != nil {
		return m.EpochsInfo
	}
	return nil
}

func (m *QueryOsmosisChainParamsResponse) GetLockableDurations() []time.Duration {
	if m != nil {
		return m.LockableDurations
	}
	return nil
}

func (m *QueryOsmosisChainParamsResponse) GetMintParams() types2.Params {
	if m != nil {
		return m.MintParams
	}
	return types2.Params{}
}

func (m *QueryOsmosisChainParamsResponse) GetDistrInfo() types3.DistrInfo {
	if m != nil {
		return m.DistrInfo
	}
	return types3.DistrInfo{}
}

type QueryOsmosisIncentivizedPoolsRequest struct {
}

func (m *QueryOsmosisIncentivizedPoolsRequest) Reset()         { *m = QueryOsmosisIncentivizedPoolsRequest{} }
func (m *QueryOsmosisIncentivizedPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOsmosisIncentivizedPoolsRequest) ProtoMessage()    {}
func (*QueryOsmosisIncentivizedPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{8}
}
func (m *QueryOsmosisIncentivizedPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOsmosisIncentivizedPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOsmosisIncentivizedPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOsmosisIncentivizedPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOsmosisIncentivizedPoolsRequest.Merge(m, src)
}
func (m *QueryOsmosisIncentivizedPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOsmosisIncentivizedPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOsmosisIncentivizedPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOsmosisIncentivizedPoolsRequest proto.InternalMessageInfo

type QueryOsmosisIncentivizedPoolsResponse struct {
	IncentivizedPools []types3.IncentivizedPool `protobuf:"bytes,1,rep,name=incentivized_pools,json=incentivizedPools,proto3" json:"incentivized_pools"`
}

func (m *QueryOsmosisIncentivizedPoolsResponse) Reset()         { *m = QueryOsmosisIncentivizedPoolsResponse{} }
func (m *QueryOsmosisIncentivizedPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOsmosisIncentivizedPoolsResponse) ProtoMessage()    {}
func (*QueryOsmosisIncentivizedPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{9}
}
func (m *QueryOsmosisIncentivizedPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOsmosisIncentivizedPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOsmosisIncentivizedPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOsmosisIncentivizedPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOsmosisIncentivizedPoolsResponse.Merge(m, src)
}
func (m *QueryOsmosisIncentivizedPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOsmosisIncentivizedPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOsmosisIncentivizedPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOsmosisIncentivizedPoolsResponse proto.InternalMessageInfo

func (m *QueryOsmosisIncentivizedPoolsResponse) GetIncentivizedPools() []types3.IncentivizedPool {
	if m != nil {
		return m.IncentivizedPools
	}
	return nil
}

type QueryOsmosisPoolsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOsmosisPoolsRequest) Reset()         { *m = QueryOsmosisPoolsRequest{} }
func (m *QueryOsmosisPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOsmosisPoolsRequest) ProtoMessage()    {}
func (*QueryOsmosisPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{10}
}
func (m *QueryOsmosisPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOsmosisPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOsmosisPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOsmosisPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOsmosisPoolsRequest.Merge(m, src)
}
func (m *QueryOsmosisPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOsmosisPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOsmosisPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOsmosisPoolsRequest proto.InternalMessageInfo

func (m *QueryOsmosisPoolsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOsmosisPoolsResponse struct {
	Pools      []OsmosisPool       `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOsmosisPoolsResponse) Reset()         { *m = QueryOsmosisPoolsResponse{} }
func (m *QueryOsmosisPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOsmosisPoolsResponse) ProtoMessage()    {}
func (*QueryOsmosisPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{11}
}
func (m *QueryOsmosisPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOsmosisPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOsmosisPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOsmosisPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOsmosisPoolsResponse.Merge(m, src)
}
func (m *QueryOsmosisPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOsmosisPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOsmosisPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOsmosisPoolsResponse proto.InternalMessageInfo

func (m *QueryOsmosisPoolsResponse) GetPools() []OsmosisPool {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *QueryOsmosisPoolsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "quasarlabs.quasarnode.qoracle.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "quasarlabs.quasarnode.qoracle.QueryParamsResponse")
	proto.RegisterType((*QueryStateRequest)(nil), "quasarlabs.quasarnode.qoracle.QueryStateRequest")
	proto.RegisterType((*QueryStateResponse)(nil), "quasarlabs.quasarnode.qoracle.QueryStateResponse")
	proto.RegisterType((*QueryOraclePricesRequest)(nil), "quasarlabs.quasarnode.qoracle.QueryOraclePricesRequest")
	proto.RegisterType((*QueryOraclePricesResponse)(nil), "quasarlabs.quasarnode.qoracle.QueryOraclePricesResponse")
	proto.RegisterType((*QueryOsmosisChainParamsRequest)(nil), "quasarlabs.quasarnode.qoracle.QueryOsmosisChainParamsRequest")
	proto.RegisterType((*QueryOsmosisChainParamsResponse)(nil), "quasarlabs.quasarnode.qoracle.QueryOsmosisChainParamsResponse")
	proto.RegisterType((*QueryOsmosisIncentivizedPoolsRequest)(nil), "quasarlabs.quasarnode.qoracle.QueryOsmosisIncentivizedPoolsRequest")
	proto.RegisterType((*QueryOsmosisIncentivizedPoolsResponse)(nil), "quasarlabs.quasarnode.qoracle.QueryOsmosisIncentivizedPoolsResponse")
	proto.RegisterType((*QueryOsmosisPoolsRequest)(nil), "quasarlabs.quasarnode.qoracle.QueryOsmosisPoolsRequest")
	proto.RegisterType((*QueryOsmosisPoolsResponse)(nil), "quasarlabs.quasarnode.qoracle.QueryOsmosisPoolsResponse")
}

func init() { proto.RegisterFile("qoracle/query.proto", fileDescriptor_68dd2d718d2cdb91) }

var fileDescriptor_68dd2d718d2cdb91 = []byte{
	// 1075 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xc6, 0x4d, 0x04, 0x93, 0xf2, 0xc7, 0xe3, 0x54, 0xb8, 0x56, 0x6a, 0x1b, 0xab, 0x49,
	0x43, 0xda, 0xec, 0x3a, 0x0e, 0x08, 0x50, 0x05, 0xa2, 0x76, 0x28, 0x2d, 0x07, 0x08, 0xee, 0xad,
	0x97, 0x65, 0xbc, 0x9e, 0xda, 0xa3, 0xda, 0x3b, 0x9b, 0x9d, 0x71, 0x44, 0xb8, 0xc1, 0x07, 0x40,
	0x48, 0xdc, 0x38, 0x70, 0xe4, 0x80, 0x38, 0x71, 0xe1, 0x2b, 0xf4, 0x18, 0x89, 0x0b, 0xe2, 0x90,
	0xa2, 0x84, 0x03, 0xdf, 0x00, 0x89, 0x13, 0x9a, 0x99, 0x37, 0xeb, 0x75, 0x9d, 0xb0, 0x4e, 0x73,
	0xb2, 0x77, 0xde, 0x9f, 0xdf, 0xef, 0xed, 0x7b, 0xef, 0x37, 0x8b, 0x0a, 0x7b, 0x3c, 0x26, 0xc1,
	0x80, 0x7a, 0x7b, 0x23, 0x1a, 0x1f, 0xb8, 0x51, 0xcc, 0x25, 0xc7, 0xd7, 0xf6, 0x46, 0x44, 0x90,
	0x78, 0x40, 0x3a, 0xc2, 0x35, 0x7f, 0x43, 0xde, 0xa5, 0x2e, 0xb8, 0x96, 0x96, 0x7b, 0xbc, 0xc7,
	0xb5, 0xa7, 0xa7, 0xfe, 0x99, 0xa0, 0xd2, 0x4a, 0x8f, 0xf3, 0xde, 0x80, 0x7a, 0x24, 0x62, 0x1e,
	0x09, 0x43, 0x2e, 0x89, 0x64, 0x3c, 0x14, 0x60, 0x2d, 0x07, 0x5c, 0x0c, 0xb9, 0xf0, 0x3a, 0x44,
	0x50, 0x6f, 0x7f, 0xab, 0x43, 0x25, 0xd9, 0xf2, 0x02, 0xce, 0x42, 0xb0, 0x6f, 0xa4, 0xed, 0x9a,
	0x4b, 0xe2, 0x15, 0x91, 0x1e, 0x0b, 0x75, 0x32, 0xf0, 0x5d, 0xb6, 0x9c, 0x23, 0x12, 0x93, 0xa1,
	0x45, 0x78, 0xcd, 0x9e, 0x76, 0x48, 0xd8, 0x0d, 0xfa, 0x24, 0x49, 0x7d, 0xc5, 0x1a, 0x34, 0x02,
	0xb3, 0xfe, 0x2b, 0xf0, 0xe8, 0xd1, 0x88, 0x07, 0x7d, 0xe1, 0xf5, 0x68, 0x48, 0xc7, 0xd6, 0x8a,
	0xb5, 0x0e, 0x59, 0x28, 0x13, 0x2a, 0xea, 0x01, 0x1c, 0xea, 0xd6, 0x21, 0xe2, 0x7c, 0xb0, 0xc9,
	0xc2, 0x80, 0x86, 0x92, 0xed, 0x53, 0x91, 0xf8, 0x8e, 0x8f, 0x20, 0xe2, 0x66, 0x56, 0x44, 0xaa,
	0x05, 0xb5, 0x65, 0x84, 0x3f, 0x53, 0x8f, 0xbb, 0xba, 0xc4, 0x36, 0xdd, 0x1b, 0x51, 0x21, 0x6b,
	0x0f, 0x51, 0x61, 0xe2, 0x54, 0x44, 0x3c, 0x14, 0x14, 0xb7, 0xd0, 0xa2, 0x79, 0x15, 0x45, 0xa7,
	0xea, 0xac, 0x2f, 0x35, 0x56, 0xdd, 0xff, 0x6d, 0xa0, 0x6b, 0xc2, 0x9b, 0x97, 0x9e, 0x1c, 0x55,
	0xe6, 0xda, 0x10, 0x5a, 0x2b, 0xa0, 0xbc, 0xce, 0xfd, 0x40, 0x12, 0x49, 0x2d, 0xe0, 0xd3, 0x1c,
	0xf0, 0x80, 0x53, 0x00, 0xfc, 0x1c, 0xbd, 0xaa, 0x7a, 0xe7, 0xc7, 0x44, 0x52, 0xe1, 0x0b, 0x65,
	0x03, 0xe8, 0x7a, 0x06, 0xf4, 0xa7, 0xfa, 0xe7, 0x41, 0x10, 0xb3, 0x48, 0xea, 0x9c, 0xc0, 0xe2,
	0x65, 0x95, 0xaf, 0xad, 0xd2, 0xe9, 0x53, 0x7c, 0x80, 0x6c, 0x7f, 0x7c, 0xc3, 0xcf, 0x8f, 0x0d,
	0x25, 0x40, 0x9b, 0xd7, 0x68, 0x8d, 0x2c, 0x34, 0x93, 0x02, 0xaa, 0x49, 0xe3, 0x5d, 0x85, 0xec,
	0x13, 0xef, 0xd7, 0x40, 0x7f, 0xe5, 0xa0, 0xaa, 0xc5, 0xb6, 0x5d, 0x62, 0x5f, 0xd2, 0xae, 0xaf,
	0xfa, 0x66, 0xab, 0xcd, 0x5d, 0x10, 0xff, 0x1a, 0x20, 0xdc, 0x4f, 0x01, 0xec, 0xaa, 0xfc, 0x86,
	0x43, 0x1f, 0x15, 0x92, 0xf2, 0x53, 0xa8, 0x97, 0x2e, 0x88, 0x9a, 0xb7, 0x55, 0x27, 0x48, 0xb5,
	0x12, 0x2a, 0xea, 0x06, 0x9b, 0xc6, 0xec, 0xc6, 0x2c, 0xa0, 0xc9, 0xb8, 0xfd, 0xe2, 0xa0, 0xab,
	0xa7, 0x18, 0x61, 0x08, 0x18, 0x5a, 0x8c, 0xf4, 0x49, 0xd1, 0xa9, 0xe6, 0xd6, 0x97, 0x1a, 0x2b,
	0xae, 0xd9, 0x61, 0x57, 0xed, 0xb0, 0x0b, 0x43, 0xed, 0xee, 0xd0, 0xa0, 0xc5, 0x59, 0xd8, 0xdc,
	0x56, 0x04, 0x7e, 0x7a, 0x5a, 0xb9, 0xd9, 0x63, 0xb2, 0x3f, 0xea, 0xb8, 0x01, 0x1f, 0x7a, 0xb0,
	0xf3, 0xe6, 0x67, 0x53, 0x74, 0x1f, 0x7b, 0xf2, 0x20, 0xa2, 0xc2, 0xc6, 0x88, 0x36, 0x00, 0xe0,
	0x0d, 0x94, 0x1f, 0x45, 0x5d, 0x22, 0x69, 0xd7, 0x27, 0xd2, 0xef, 0x53, 0xd6, 0xeb, 0x4b, 0x3d,
	0x02, 0xb9, 0xf6, 0x2b, 0x60, 0xb8, 0x23, 0xef, 0xe9, 0xe3, 0x5a, 0x15, 0x95, 0x0d, 0x67, 0x53,
	0x6a, 0x4b, 0x29, 0xc1, 0xe4, 0x16, 0xfd, 0x98, 0x43, 0x95, 0x33, 0x5d, 0xa0, 0xb8, 0x7b, 0x68,
	0xc9, 0xe8, 0x82, 0xcf, 0xc2, 0x47, 0x1c, 0x2a, 0x7c, 0xdd, 0xb5, 0x12, 0x62, 0x6c, 0x49, 0x91,
	0x1f, 0xaa, 0xc7, 0xfb, 0xe1, 0x23, 0x0e, 0xef, 0x19, 0x19, 0xbb, 0x3a, 0xc1, 0x1f, 0x20, 0x3c,
	0xe0, 0xc1, 0x63, 0xd2, 0x19, 0x50, 0xbf, 0x3b, 0x8a, 0x8d, 0x2a, 0x16, 0xe7, 0xab, 0xb9, 0xf5,
	0x5c, 0x33, 0xff, 0xef, 0x51, 0xe5, 0x25, 0xc9, 0x86, 0xd4, 0xdd, 0x01, 0x4b, 0x3b, 0x6f, 0x9d,
	0xed, 0x89, 0xc0, 0x2d, 0xb4, 0xa4, 0x84, 0x07, 0x16, 0x01, 0x46, 0x6f, 0x25, 0xe1, 0xa2, 0x45,
	0xc9, 0x32, 0x99, 0x58, 0x6d, 0xa4, 0x4c, 0xe6, 0x04, 0x77, 0xd0, 0x15, 0x9d, 0x44, 0x33, 0xf3,
	0xa3, 0x98, 0xef, 0x33, 0xa1, 0x99, 0xa8, 0x99, 0xba, 0xdc, 0x74, 0x55, 0xc0, 0x1f, 0x47, 0x95,
	0xb5, 0xd9, 0xda, 0xd3, 0x2e, 0xa8, 0x64, 0xba, 0xec, 0xdd, 0x24, 0x15, 0xfe, 0x04, 0xa1, 0x2e,
	0x13, 0x32, 0x36, 0xef, 0x6c, 0x41, 0xf3, 0x7c, 0x23, 0xe1, 0xa9, 0x06, 0x39, 0x25, 0x8a, 0xc9,
	0x80, 0xa8, 0x88, 0xd4, 0xbb, 0x7b, 0xb1, 0x6b, 0x0f, 0x6a, 0x6b, 0xe8, 0x7a, 0xba, 0x4f, 0x53,
	0xbb, 0x62, 0x1b, 0xfa, 0x8d, 0x83, 0x56, 0x33, 0x1c, 0xa1, 0xad, 0x14, 0xe1, 0xe9, 0x95, 0x86,
	0xee, 0xd6, 0xb3, 0x98, 0x3e, 0x9b, 0xd6, 0x2e, 0x15, 0x7b, 0x16, 0xae, 0xd6, 0xb1, 0x4b, 0x95,
	0x5a, 0x37, 0x20, 0x8b, 0xef, 0x22, 0x34, 0xbe, 0xd1, 0x40, 0x35, 0xd7, 0x26, 0x56, 0xc7, 0xdc,
	0x03, 0xe3, 0x8e, 0xf6, 0xac, 0x1c, 0xb7, 0x53, 0x91, 0xb5, 0x9f, 0x93, 0xe5, 0x9c, 0x00, 0x81,
	0x42, 0xef, 0xa2, 0x85, 0x74, 0x6d, 0x1b, 0xb3, 0x49, 0x46, 0xaa, 0x2a, 0x13, 0x8e, 0x3f, 0x9a,
	0x60, 0x6b, 0x54, 0xf7, 0x46, 0x26, 0x5b, 0x43, 0x22, 0x4d, 0xb7, 0xf1, 0xcf, 0x0b, 0x68, 0x41,
	0xd3, 0xc5, 0x3f, 0x38, 0x68, 0x11, 0x86, 0x72, 0x2b, 0x83, 0xd6, 0xf4, 0x15, 0x58, 0x6a, 0x9c,
	0x27, 0xc4, 0xf0, 0xa8, 0x6d, 0x7e, 0xfd, 0xdb, 0x5f, 0xdf, 0xcd, 0xdf, 0xc0, 0xab, 0xde, 0x38,
	0xd6, 0x1b, 0xc7, 0x7a, 0x93, 0xdf, 0x13, 0xf8, 0x7b, 0x07, 0x2d, 0x18, 0x19, 0xae, 0xcf, 0x02,
	0x96, 0xbe, 0x30, 0x4b, 0x5b, 0xe7, 0x88, 0x00, 0x76, 0xb7, 0x34, 0xbb, 0x35, 0x7c, 0x3d, 0x83,
	0x9d, 0xbe, 0x02, 0xf0, 0xaf, 0x0e, 0xba, 0x9c, 0x96, 0x63, 0xfc, 0xf6, 0x2c, 0x88, 0xa7, 0xa8,
	0x7b, 0xe9, 0x9d, 0xf3, 0x07, 0x02, 0xe3, 0x37, 0x35, 0x63, 0x17, 0xdf, 0xca, 0x60, 0x6c, 0x7e,
	0x7c, 0x10, 0xf1, 0x43, 0x07, 0xe1, 0x69, 0xc5, 0xc5, 0xef, 0xcd, 0x44, 0xe3, 0x2c, 0x31, 0x2f,
	0xbd, 0xff, 0xbc, 0xe1, 0x50, 0xcb, 0x6d, 0x5d, 0xcb, 0x5b, 0x78, 0x3b, 0xab, 0x16, 0xf8, 0x78,
	0xd3, 0x5f, 0x96, 0x20, 0xc5, 0xf8, 0x6f, 0x07, 0x15, 0xcf, 0xd2, 0x1c, 0xdc, 0x3a, 0x07, 0xb3,
	0xb3, 0xa4, 0xad, 0xb4, 0x73, 0xb1, 0x24, 0x50, 0xe4, 0x1d, 0x5d, 0xe4, 0x6d, 0xfc, 0xee, 0x8c,
	0x45, 0x4e, 0x6b, 0xa4, 0x99, 0xbb, 0x94, 0xd2, 0xcc, 0x38, 0x77, 0xd3, 0x02, 0x38, 0xe3, 0xdc,
	0x9d, 0x22, 0x6a, 0xb3, 0xcf, 0x5d, 0xea, 0x43, 0x5b, 0x34, 0x3f, 0x7e, 0x72, 0x5c, 0x76, 0x0e,
	0x8f, 0xcb, 0xce, 0x9f, 0xc7, 0x65, 0xe7, 0xdb, 0x93, 0xf2, 0xdc, 0xe1, 0x49, 0x79, 0xee, 0xf7,
	0x93, 0xf2, 0xdc, 0xc3, 0x7a, 0xea, 0xb2, 0x3b, 0x3d, 0xe3, 0x17, 0x49, 0x4e, 0x7d, 0xf5, 0x75,
	0x16, 0xf5, 0xd7, 0xf9, 0xf6, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x07, 0xde, 0x68, 0x20, 0x37,
	0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of State items.
	State(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error)
	// Queries a list of OraclePrices items.
	OraclePrices(ctx context.Context, in *QueryOraclePricesRequest, opts ...grpc.CallOption) (*QueryOraclePricesResponse, error)
	// Queries a list of OsmosisChainParams items.
	OsmosisChainParams(ctx context.Context, in *QueryOsmosisChainParamsRequest, opts ...grpc.CallOption) (*QueryOsmosisChainParamsResponse, error)
	// Queries a list of OsmosisIncentivizedPools items.
	OsmosisIncentivizedPools(ctx context.Context, in *QueryOsmosisIncentivizedPoolsRequest, opts ...grpc.CallOption) (*QueryOsmosisIncentivizedPoolsResponse, error)
	// Queries a list of OsmosisPools items.
	OsmosisPools(ctx context.Context, in *QueryOsmosisPoolsRequest, opts ...grpc.CallOption) (*QueryOsmosisPoolsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qoracle.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) State(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error) {
	out := new(QueryStateResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qoracle.Query/State", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OraclePrices(ctx context.Context, in *QueryOraclePricesRequest, opts ...grpc.CallOption) (*QueryOraclePricesResponse, error) {
	out := new(QueryOraclePricesResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qoracle.Query/OraclePrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OsmosisChainParams(ctx context.Context, in *QueryOsmosisChainParamsRequest, opts ...grpc.CallOption) (*QueryOsmosisChainParamsResponse, error) {
	out := new(QueryOsmosisChainParamsResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qoracle.Query/OsmosisChainParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OsmosisIncentivizedPools(ctx context.Context, in *QueryOsmosisIncentivizedPoolsRequest, opts ...grpc.CallOption) (*QueryOsmosisIncentivizedPoolsResponse, error) {
	out := new(QueryOsmosisIncentivizedPoolsResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qoracle.Query/OsmosisIncentivizedPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OsmosisPools(ctx context.Context, in *QueryOsmosisPoolsRequest, opts ...grpc.CallOption) (*QueryOsmosisPoolsResponse, error) {
	out := new(QueryOsmosisPoolsResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qoracle.Query/OsmosisPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of State items.
	State(context.Context, *QueryStateRequest) (*QueryStateResponse, error)
	// Queries a list of OraclePrices items.
	OraclePrices(context.Context, *QueryOraclePricesRequest) (*QueryOraclePricesResponse, error)
	// Queries a list of OsmosisChainParams items.
	OsmosisChainParams(context.Context, *QueryOsmosisChainParamsRequest) (*QueryOsmosisChainParamsResponse, error)
	// Queries a list of OsmosisIncentivizedPools items.
	OsmosisIncentivizedPools(context.Context, *QueryOsmosisIncentivizedPoolsRequest) (*QueryOsmosisIncentivizedPoolsResponse, error)
	// Queries a list of OsmosisPools items.
	OsmosisPools(context.Context, *QueryOsmosisPoolsRequest) (*QueryOsmosisPoolsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) State(ctx context.Context, req *QueryStateRequest) (*QueryStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (*UnimplementedQueryServer) OraclePrices(ctx context.Context, req *QueryOraclePricesRequest) (*QueryOraclePricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OraclePrices not implemented")
}
func (*UnimplementedQueryServer) OsmosisChainParams(ctx context.Context, req *QueryOsmosisChainParamsRequest) (*QueryOsmosisChainParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OsmosisChainParams not implemented")
}
func (*UnimplementedQueryServer) OsmosisIncentivizedPools(ctx context.Context, req *QueryOsmosisIncentivizedPoolsRequest) (*QueryOsmosisIncentivizedPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OsmosisIncentivizedPools not implemented")
}
func (*UnimplementedQueryServer) OsmosisPools(ctx context.Context, req *QueryOsmosisPoolsRequest) (*QueryOsmosisPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OsmosisPools not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qoracle.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qoracle.Query/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).State(ctx, req.(*QueryStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OraclePrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOraclePricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OraclePrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qoracle.Query/OraclePrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OraclePrices(ctx, req.(*QueryOraclePricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OsmosisChainParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOsmosisChainParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OsmosisChainParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qoracle.Query/OsmosisChainParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OsmosisChainParams(ctx, req.(*QueryOsmosisChainParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OsmosisIncentivizedPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOsmosisIncentivizedPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OsmosisIncentivizedPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qoracle.Query/OsmosisIncentivizedPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OsmosisIncentivizedPools(ctx, req.(*QueryOsmosisIncentivizedPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OsmosisPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOsmosisPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OsmosisPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qoracle.Query/OsmosisPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OsmosisPools(ctx, req.(*QueryOsmosisPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quasarlabs.quasarnode.qoracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "State",
			Handler:    _Query_State_Handler,
		},
		{
			MethodName: "OraclePrices",
			Handler:    _Query_OraclePrices_Handler,
		},
		{
			MethodName: "OsmosisChainParams",
			Handler:    _Query_OsmosisChainParams_Handler,
		},
		{
			MethodName: "OsmosisIncentivizedPools",
			Handler:    _Query_OsmosisIncentivizedPools_Handler,
		},
		{
			MethodName: "OsmosisPools",
			Handler:    _Query_OsmosisPools_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qoracle/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OsmosisPoolsState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.OsmosisIncentivizedPoolsState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.OsmosisParamsRequestState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CoinRatesState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOraclePricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOraclePricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOraclePricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOraclePricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOraclePricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOraclePricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAtHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UpdatedAtHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOsmosisChainParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOsmosisChainParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOsmosisChainParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOsmosisChainParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOsmosisChainParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOsmosisChainParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DistrInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MintEpochProvisions.Size()
		i -= size
		if _, err := m.MintEpochProvisions.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.MintParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.LockableDurations) > 0 {
		dAtA9 := make([]byte, len(m.LockableDurations)*10)
		var j8 int
		for _, num1 := range m.LockableDurations {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintQuery(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EpochsInfo) > 0 {
		for iNdEx := len(m.EpochsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOsmosisIncentivizedPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOsmosisIncentivizedPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOsmosisIncentivizedPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOsmosisIncentivizedPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOsmosisIncentivizedPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOsmosisIncentivizedPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncentivizedPools) > 0 {
		for iNdEx := len(m.IncentivizedPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentivizedPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOsmosisPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOsmosisPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOsmosisPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOsmosisPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOsmosisPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOsmosisPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CoinRatesState.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.OsmosisParamsRequestState.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.OsmosisIncentivizedPoolsState.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.OsmosisPoolsState.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOraclePricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOraclePricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.UpdatedAtHeight != 0 {
		n += 1 + sovQuery(uint64(m.UpdatedAtHeight))
	}
	return n
}

func (m *QueryOsmosisChainParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOsmosisChainParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochsInfo) > 0 {
		for _, e := range m.EpochsInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.LockableDurations) > 0 {
		l = 0
		for _, e := range m.LockableDurations {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	l = m.MintParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MintEpochProvisions.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.DistrInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOsmosisIncentivizedPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOsmosisIncentivizedPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IncentivizedPools) > 0 {
		for _, e := range m.IncentivizedPools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOsmosisPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOsmosisPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinRatesState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinRatesState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisParamsRequestState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OsmosisParamsRequestState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisIncentivizedPoolsState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OsmosisIncentivizedPoolsState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisPoolsState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OsmosisPoolsState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOraclePricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOraclePricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOraclePricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOraclePricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOraclePricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOraclePricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, types.DecCoin{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtHeight", wireType)
			}
			m.UpdatedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOsmosisChainParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOsmosisChainParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOsmosisChainParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOsmosisChainParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOsmosisChainParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOsmosisChainParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochsInfo = append(m.EpochsInfo, types1.EpochInfo{})
			if err := m.EpochsInfo[len(m.EpochsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v time.Duration
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= time.Duration(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LockableDurations = append(m.LockableDurations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LockableDurations) == 0 {
					m.LockableDurations = make([]time.Duration, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v time.Duration
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= time.Duration(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LockableDurations = append(m.LockableDurations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LockableDurations", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintEpochProvisions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintEpochProvisions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DistrInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOsmosisIncentivizedPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOsmosisIncentivizedPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOsmosisIncentivizedPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOsmosisIncentivizedPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOsmosisIncentivizedPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOsmosisIncentivizedPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivizedPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentivizedPools = append(m.IncentivizedPools, types3.IncentivizedPool{})
			if err := m.IncentivizedPools[len(m.IncentivizedPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOsmosisPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOsmosisPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOsmosisPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOsmosisPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOsmosisPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOsmosisPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, OsmosisPool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
