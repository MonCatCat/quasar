// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qvesting/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryVestingAccountsRequest is the request type for the Query/Accounts RPC method.
type QueryVestingAccountsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVestingAccountsRequest) Reset()         { *m = QueryVestingAccountsRequest{} }
func (m *QueryVestingAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVestingAccountsRequest) ProtoMessage()    {}
func (*QueryVestingAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{2}
}
func (m *QueryVestingAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVestingAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVestingAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVestingAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVestingAccountsRequest.Merge(m, src)
}
func (m *QueryVestingAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVestingAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVestingAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVestingAccountsRequest proto.InternalMessageInfo

func (m *QueryVestingAccountsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryVestingAccountsResponse is the response type for the Query/Accounts RPC method.
type QueryVestingAccountsResponse struct {
	// accounts are the existing vesting accounts
	Accounts []*types.Any `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVestingAccountsResponse) Reset()         { *m = QueryVestingAccountsResponse{} }
func (m *QueryVestingAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVestingAccountsResponse) ProtoMessage()    {}
func (*QueryVestingAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{3}
}
func (m *QueryVestingAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVestingAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVestingAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVestingAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVestingAccountsResponse.Merge(m, src)
}
func (m *QueryVestingAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVestingAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVestingAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVestingAccountsResponse proto.InternalMessageInfo

func (m *QueryVestingAccountsResponse) GetAccounts() []*types.Any {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *QueryVestingAccountsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryQVestingAccountsRequest is the request type for the Query/Accounts RPC method.
type QueryQVestingAccountsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryQVestingAccountsRequest) Reset()         { *m = QueryQVestingAccountsRequest{} }
func (m *QueryQVestingAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQVestingAccountsRequest) ProtoMessage()    {}
func (*QueryQVestingAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{4}
}
func (m *QueryQVestingAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQVestingAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQVestingAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQVestingAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQVestingAccountsRequest.Merge(m, src)
}
func (m *QueryQVestingAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQVestingAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQVestingAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQVestingAccountsRequest proto.InternalMessageInfo

func (m *QueryQVestingAccountsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryQVestingAccountsResponse is the response type for the Query/Accounts RPC method.
type QueryQVestingAccountsResponse struct {
	// accounts are the existing vesting accounts
	Accounts []*types.Any `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryQVestingAccountsResponse) Reset()         { *m = QueryQVestingAccountsResponse{} }
func (m *QueryQVestingAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQVestingAccountsResponse) ProtoMessage()    {}
func (*QueryQVestingAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{5}
}
func (m *QueryQVestingAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQVestingAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQVestingAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQVestingAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQVestingAccountsResponse.Merge(m, src)
}
func (m *QueryQVestingAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQVestingAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQVestingAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQVestingAccountsResponse proto.InternalMessageInfo

func (m *QueryQVestingAccountsResponse) GetAccounts() []*types.Any {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *QueryQVestingAccountsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySpendableBalancesRequest defines the gRPC request structure for querying
// an account's spendable balances.
type QuerySpendableBalancesRequest struct {
	// address is the address to query spendable balances for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySpendableBalancesRequest) Reset()         { *m = QuerySpendableBalancesRequest{} }
func (m *QuerySpendableBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpendableBalancesRequest) ProtoMessage()    {}
func (*QuerySpendableBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{6}
}
func (m *QuerySpendableBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpendableBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpendableBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpendableBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpendableBalancesRequest.Merge(m, src)
}
func (m *QuerySpendableBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpendableBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpendableBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpendableBalancesRequest proto.InternalMessageInfo

// QuerySpendableBalancesResponse defines the gRPC response structure for querying an account's spendable balances.
type QuerySpendableBalancesResponse struct {
	// balances is the spendable balances of all the coins.
	Balances github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=balances,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balances"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySpendableBalancesResponse) Reset()         { *m = QuerySpendableBalancesResponse{} }
func (m *QuerySpendableBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpendableBalancesResponse) ProtoMessage()    {}
func (*QuerySpendableBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{7}
}
func (m *QuerySpendableBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpendableBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpendableBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpendableBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpendableBalancesResponse.Merge(m, src)
}
func (m *QuerySpendableBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpendableBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpendableBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpendableBalancesResponse proto.InternalMessageInfo

func (m *QuerySpendableBalancesResponse) GetBalances() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *QuerySpendableBalancesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySpendableSupplyRequest is the request type for the Query/SpendableSupply RPC method.
type QuerySpendableSupplyRequest struct {
	// denom is the coin denom to query locked supply for.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QuerySpendableSupplyRequest) Reset()         { *m = QuerySpendableSupplyRequest{} }
func (m *QuerySpendableSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpendableSupplyRequest) ProtoMessage()    {}
func (*QuerySpendableSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{8}
}
func (m *QuerySpendableSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpendableSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpendableSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpendableSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpendableSupplyRequest.Merge(m, src)
}
func (m *QuerySpendableSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpendableSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpendableSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpendableSupplyRequest proto.InternalMessageInfo

func (m *QuerySpendableSupplyRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QuerySpendableSupplyResponse is the response type for the Query/SpendableSupply RPC method.
type QuerySpendableSupplyResponse struct {
	// amount is the supply of the coin.
	Amount types1.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QuerySpendableSupplyResponse) Reset()         { *m = QuerySpendableSupplyResponse{} }
func (m *QuerySpendableSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpendableSupplyResponse) ProtoMessage()    {}
func (*QuerySpendableSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{9}
}
func (m *QuerySpendableSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpendableSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpendableSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpendableSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpendableSupplyResponse.Merge(m, src)
}
func (m *QuerySpendableSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpendableSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpendableSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpendableSupplyResponse proto.InternalMessageInfo

func (m *QuerySpendableSupplyResponse) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

// QueryVestingLockedSupplyRequest is the request type for the Query/VestingLockedSupply RPC method.
type QueryVestingLockedSupplyRequest struct {
	// denom is the coin denom to query locked supply for.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryVestingLockedSupplyRequest) Reset()         { *m = QueryVestingLockedSupplyRequest{} }
func (m *QueryVestingLockedSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVestingLockedSupplyRequest) ProtoMessage()    {}
func (*QueryVestingLockedSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{10}
}
func (m *QueryVestingLockedSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVestingLockedSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVestingLockedSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVestingLockedSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVestingLockedSupplyRequest.Merge(m, src)
}
func (m *QueryVestingLockedSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVestingLockedSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVestingLockedSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVestingLockedSupplyRequest proto.InternalMessageInfo

func (m *QueryVestingLockedSupplyRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryVestingLockedSupplyResponse is the response type for the Query/VestingLockedSupply RPC method.
type QueryVestingLockedSupplyResponse struct {
	// amount is the supply of the coin.
	Amount types1.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryVestingLockedSupplyResponse) Reset()         { *m = QueryVestingLockedSupplyResponse{} }
func (m *QueryVestingLockedSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVestingLockedSupplyResponse) ProtoMessage()    {}
func (*QueryVestingLockedSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{11}
}
func (m *QueryVestingLockedSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVestingLockedSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVestingLockedSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVestingLockedSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVestingLockedSupplyResponse.Merge(m, src)
}
func (m *QueryVestingLockedSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVestingLockedSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVestingLockedSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVestingLockedSupplyResponse proto.InternalMessageInfo

func (m *QueryVestingLockedSupplyResponse) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

// QueryVestingLockedSupplyRequest is the request type for the Query/DelegationLockedSupply RPC method.
type QueryDelegationLockedSupplyRequest struct {
}

func (m *QueryDelegationLockedSupplyRequest) Reset()         { *m = QueryDelegationLockedSupplyRequest{} }
func (m *QueryDelegationLockedSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationLockedSupplyRequest) ProtoMessage()    {}
func (*QueryDelegationLockedSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{12}
}
func (m *QueryDelegationLockedSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationLockedSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationLockedSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationLockedSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationLockedSupplyRequest.Merge(m, src)
}
func (m *QueryDelegationLockedSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationLockedSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationLockedSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationLockedSupplyRequest proto.InternalMessageInfo

// QueryVestingLockedSupplyResponse is the response type for the Query/DelegationLockedSupply RPC method.
type QueryDelegationLockedSupplyResponse struct {
	// amount is the supply of the coin.
	Amount types1.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryDelegationLockedSupplyResponse) Reset()         { *m = QueryDelegationLockedSupplyResponse{} }
func (m *QueryDelegationLockedSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationLockedSupplyResponse) ProtoMessage()    {}
func (*QueryDelegationLockedSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{13}
}
func (m *QueryDelegationLockedSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationLockedSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationLockedSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationLockedSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationLockedSupplyResponse.Merge(m, src)
}
func (m *QueryDelegationLockedSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationLockedSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationLockedSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationLockedSupplyResponse proto.InternalMessageInfo

func (m *QueryDelegationLockedSupplyResponse) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

// QueryDelegatorLockedSupplyRequest is the request type for the Query/DelegatorLockedSupply RPC method.
type QueryDelegatorLockedSupplyRequest struct {
	// address is the address to query delegation balance for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryDelegatorLockedSupplyRequest) Reset()         { *m = QueryDelegatorLockedSupplyRequest{} }
func (m *QueryDelegatorLockedSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorLockedSupplyRequest) ProtoMessage()    {}
func (*QueryDelegatorLockedSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{14}
}
func (m *QueryDelegatorLockedSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorLockedSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorLockedSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorLockedSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorLockedSupplyRequest.Merge(m, src)
}
func (m *QueryDelegatorLockedSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorLockedSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorLockedSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorLockedSupplyRequest proto.InternalMessageInfo

func (m *QueryDelegatorLockedSupplyRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryDelegatorLockedSupplyResponse is the response type for the Query/DelegatorLockedSupply RPC method.
type QueryDelegatorLockedSupplyResponse struct {
	// amount is the supply of the coin.
	Amount types1.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryDelegatorLockedSupplyResponse) Reset()         { *m = QueryDelegatorLockedSupplyResponse{} }
func (m *QueryDelegatorLockedSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorLockedSupplyResponse) ProtoMessage()    {}
func (*QueryDelegatorLockedSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{15}
}
func (m *QueryDelegatorLockedSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorLockedSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorLockedSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorLockedSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorLockedSupplyResponse.Merge(m, src)
}
func (m *QueryDelegatorLockedSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorLockedSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorLockedSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorLockedSupplyResponse proto.InternalMessageInfo

func (m *QueryDelegatorLockedSupplyResponse) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

// QueryTotalLockedSupplyRequest is the request type for the Query/TotalLockedSupply RPC method.
type QueryTotalLockedSupplyRequest struct {
}

func (m *QueryTotalLockedSupplyRequest) Reset()         { *m = QueryTotalLockedSupplyRequest{} }
func (m *QueryTotalLockedSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLockedSupplyRequest) ProtoMessage()    {}
func (*QueryTotalLockedSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{16}
}
func (m *QueryTotalLockedSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLockedSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLockedSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLockedSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLockedSupplyRequest.Merge(m, src)
}
func (m *QueryTotalLockedSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLockedSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLockedSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLockedSupplyRequest proto.InternalMessageInfo

// QueryTotalLockedSupplyResponse is the response type for the Query/TotalLockedSupply RPC method.
type QueryTotalLockedSupplyResponse struct {
	// amount is the supply of the coin.
	Amount types1.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryTotalLockedSupplyResponse) Reset()         { *m = QueryTotalLockedSupplyResponse{} }
func (m *QueryTotalLockedSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLockedSupplyResponse) ProtoMessage()    {}
func (*QueryTotalLockedSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccd23b8551580b1, []int{17}
}
func (m *QueryTotalLockedSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLockedSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLockedSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLockedSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLockedSupplyResponse.Merge(m, src)
}
func (m *QueryTotalLockedSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLockedSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLockedSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLockedSupplyResponse proto.InternalMessageInfo

func (m *QueryTotalLockedSupplyResponse) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "quasarlabs.quasarnode.qvesting.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "quasarlabs.quasarnode.qvesting.QueryParamsResponse")
	proto.RegisterType((*QueryVestingAccountsRequest)(nil), "quasarlabs.quasarnode.qvesting.QueryVestingAccountsRequest")
	proto.RegisterType((*QueryVestingAccountsResponse)(nil), "quasarlabs.quasarnode.qvesting.QueryVestingAccountsResponse")
	proto.RegisterType((*QueryQVestingAccountsRequest)(nil), "quasarlabs.quasarnode.qvesting.QueryQVestingAccountsRequest")
	proto.RegisterType((*QueryQVestingAccountsResponse)(nil), "quasarlabs.quasarnode.qvesting.QueryQVestingAccountsResponse")
	proto.RegisterType((*QuerySpendableBalancesRequest)(nil), "quasarlabs.quasarnode.qvesting.QuerySpendableBalancesRequest")
	proto.RegisterType((*QuerySpendableBalancesResponse)(nil), "quasarlabs.quasarnode.qvesting.QuerySpendableBalancesResponse")
	proto.RegisterType((*QuerySpendableSupplyRequest)(nil), "quasarlabs.quasarnode.qvesting.QuerySpendableSupplyRequest")
	proto.RegisterType((*QuerySpendableSupplyResponse)(nil), "quasarlabs.quasarnode.qvesting.QuerySpendableSupplyResponse")
	proto.RegisterType((*QueryVestingLockedSupplyRequest)(nil), "quasarlabs.quasarnode.qvesting.QueryVestingLockedSupplyRequest")
	proto.RegisterType((*QueryVestingLockedSupplyResponse)(nil), "quasarlabs.quasarnode.qvesting.QueryVestingLockedSupplyResponse")
	proto.RegisterType((*QueryDelegationLockedSupplyRequest)(nil), "quasarlabs.quasarnode.qvesting.QueryDelegationLockedSupplyRequest")
	proto.RegisterType((*QueryDelegationLockedSupplyResponse)(nil), "quasarlabs.quasarnode.qvesting.QueryDelegationLockedSupplyResponse")
	proto.RegisterType((*QueryDelegatorLockedSupplyRequest)(nil), "quasarlabs.quasarnode.qvesting.QueryDelegatorLockedSupplyRequest")
	proto.RegisterType((*QueryDelegatorLockedSupplyResponse)(nil), "quasarlabs.quasarnode.qvesting.QueryDelegatorLockedSupplyResponse")
	proto.RegisterType((*QueryTotalLockedSupplyRequest)(nil), "quasarlabs.quasarnode.qvesting.QueryTotalLockedSupplyRequest")
	proto.RegisterType((*QueryTotalLockedSupplyResponse)(nil), "quasarlabs.quasarnode.qvesting.QueryTotalLockedSupplyResponse")
}

func init() { proto.RegisterFile("qvesting/query.proto", fileDescriptor_2ccd23b8551580b1) }

var fileDescriptor_2ccd23b8551580b1 = []byte{
	// 970 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x41, 0x8f, 0xdb, 0x44,
	0x18, 0xcd, 0x2c, 0x34, 0x2c, 0x53, 0xa9, 0xa5, 0xd3, 0x14, 0xed, 0x9a, 0xe2, 0x2c, 0x06, 0x95,
	0x08, 0xa9, 0x76, 0x93, 0x08, 0xb5, 0xb4, 0xdd, 0xb6, 0xc9, 0x2e, 0x20, 0x04, 0x87, 0x36, 0x45,
	0x20, 0xa8, 0x60, 0x35, 0x8e, 0xa7, 0x26, 0xaa, 0xe3, 0x71, 0x32, 0x4e, 0x45, 0xb4, 0xda, 0x0b,
	0x27, 0x24, 0x2e, 0x48, 0xfc, 0x81, 0xe5, 0x8a, 0x04, 0x27, 0x7e, 0x03, 0x5a, 0xed, 0x01, 0x56,
	0x70, 0xd9, 0x13, 0x8b, 0x36, 0x1c, 0xe0, 0xcc, 0x1f, 0x40, 0x99, 0x19, 0x7b, 0x63, 0xc7, 0x4e,
	0x9c, 0x04, 0xa4, 0x9e, 0x12, 0xdb, 0xf3, 0xbd, 0xef, 0xbd, 0xe7, 0xf9, 0xe6, 0x25, 0xb0, 0xd0,
	0x79, 0x4c, 0x98, 0xdf, 0x72, 0x6d, 0xa3, 0xd3, 0x23, 0xdd, 0xbe, 0xee, 0x75, 0xa9, 0x4f, 0x91,
	0xda, 0xe9, 0x61, 0x86, 0xbb, 0x0e, 0x36, 0x99, 0x2e, 0xbe, 0xba, 0xd4, 0x22, 0x7a, 0xb0, 0x56,
	0x29, 0xd8, 0xd4, 0xa6, 0x7c, 0xa9, 0x31, 0xfc, 0x26, 0xaa, 0x94, 0x8b, 0x36, 0xa5, 0xb6, 0x43,
	0x0c, 0xec, 0xb5, 0x0c, 0xec, 0xba, 0xd4, 0xc7, 0x7e, 0x8b, 0xba, 0x4c, 0x3e, 0x7d, 0xad, 0x49,
	0x59, 0x9b, 0x32, 0xc3, 0xc4, 0x8c, 0x88, 0x66, 0xc6, 0xe3, 0xb2, 0x49, 0x7c, 0x5c, 0x36, 0x3c,
	0x6c, 0xb7, 0x5c, 0xbe, 0x58, 0xae, 0xbd, 0x10, 0xb2, 0xf2, 0x70, 0x17, 0xb7, 0x03, 0x88, 0x55,
	0xd9, 0x80, 0x5f, 0x99, 0xbd, 0x87, 0x06, 0x76, 0x25, 0x63, 0x45, 0x1d, 0x45, 0x0f, 0x70, 0x9b,
	0xb4, 0x15, 0x20, 0xae, 0x8a, 0xe7, 0x5b, 0x82, 0xb4, 0xb8, 0x10, 0x8f, 0xb4, 0x02, 0x44, 0xf7,
	0x86, 0x74, 0xee, 0xf2, 0x56, 0x0d, 0xd2, 0xe9, 0x11, 0xe6, 0x6b, 0x0f, 0xe0, 0xf9, 0xc8, 0x5d,
	0xe6, 0x51, 0x97, 0x11, 0xb4, 0x09, 0xf3, 0x82, 0xd2, 0x0a, 0x58, 0x03, 0xa5, 0xd3, 0x95, 0x4b,
	0xfa, 0x64, 0xab, 0x74, 0x51, 0x5f, 0x7f, 0x7a, 0xef, 0xf7, 0x62, 0xae, 0x21, 0x6b, 0x35, 0x02,
	0x5f, 0xe0, 0xe0, 0x1f, 0x88, 0x45, 0xb5, 0x66, 0x93, 0xf6, 0x5c, 0x3f, 0xe8, 0x8d, 0xde, 0x82,
	0xf0, 0xc4, 0x92, 0xb0, 0x91, 0x24, 0x3d, 0x54, 0xa8, 0x8b, 0x97, 0x25, 0x75, 0xea, 0x77, 0xb1,
	0x4d, 0x64, 0x6d, 0x63, 0xa4, 0x52, 0xfb, 0x1e, 0xc0, 0x8b, 0xc9, 0x7d, 0x42, 0x35, 0xcb, 0x58,
	0xde, 0x5b, 0x01, 0x6b, 0x4f, 0x95, 0x4e, 0x57, 0x0a, 0xba, 0xf0, 0x58, 0x0f, 0x3c, 0xd6, 0x6b,
	0x6e, 0xbf, 0x8e, 0xf6, 0x7f, 0xbc, 0x7c, 0x26, 0x0a, 0xd2, 0x08, 0x2b, 0xd1, 0xdb, 0x11, 0xba,
	0x4b, 0x9c, 0xee, 0xab, 0x53, 0xe9, 0x0a, 0x0a, 0x11, 0xbe, 0x0f, 0x25, 0xdd, 0x7b, 0xff, 0xb3,
	0x2f, 0x3f, 0x00, 0xf8, 0x62, 0x4a, 0xa3, 0x27, 0xd3, 0x98, 0xaf, 0x02, 0xc2, 0xf7, 0x3d, 0xe2,
	0x5a, 0xd8, 0x74, 0x48, 0x1d, 0x3b, 0xd8, 0x6d, 0x92, 0xd0, 0x9a, 0x15, 0xf8, 0x0c, 0xb6, 0xac,
	0x2e, 0x61, 0x62, 0x63, 0x3e, 0xdb, 0x08, 0x2e, 0x63, 0xa6, 0x2d, 0xcd, 0x6b, 0xda, 0xf5, 0xe5,
	0x2f, 0x77, 0x8b, 0xb9, 0xbf, 0x76, 0x8b, 0x39, 0xed, 0x57, 0x00, 0xd5, 0x34, 0x36, 0xd2, 0x3f,
	0x1b, 0x2e, 0x9b, 0xf2, 0x9e, 0xf4, 0x6f, 0x35, 0xd2, 0x32, 0x68, 0xb6, 0x41, 0x5b, 0x6e, 0xfd,
	0xca, 0x70, 0x36, 0xbe, 0x3b, 0x2a, 0x96, 0xec, 0x96, 0xff, 0x59, 0xcf, 0xd4, 0x9b, 0xb4, 0x2d,
	0x27, 0x54, 0x7e, 0x5c, 0x66, 0xd6, 0x23, 0xc3, 0xef, 0x7b, 0x84, 0xf1, 0x02, 0xd6, 0x08, 0xc1,
	0xff, 0x3b, 0x8b, 0xab, 0x72, 0x24, 0x43, 0x4d, 0xf7, 0x7b, 0x9e, 0xe7, 0xf4, 0x03, 0x7f, 0x0b,
	0xf0, 0x94, 0x45, 0x5c, 0xda, 0x96, 0xee, 0x8a, 0x0b, 0xed, 0x43, 0xb9, 0x61, 0xc7, 0x8a, 0xa4,
	0x0d, 0x57, 0x61, 0x1e, 0xb7, 0x87, 0x7b, 0x41, 0x6e, 0xd6, 0x09, 0x26, 0xc8, 0x03, 0x42, 0x2c,
	0xd7, 0xae, 0xc2, 0xe2, 0xe8, 0xe0, 0xbe, 0x47, 0x9b, 0x8f, 0x88, 0x95, 0x85, 0xd1, 0x03, 0xb8,
	0x96, 0x5e, 0xb8, 0x28, 0xab, 0x57, 0xa0, 0xc6, 0xc1, 0x37, 0x89, 0x43, 0x6c, 0x6e, 0x5b, 0x02,
	0x31, 0xed, 0x53, 0xf8, 0xf2, 0xc4, 0x55, 0x8b, 0xb2, 0x58, 0x87, 0x2f, 0x8d, 0xe2, 0xd3, 0x6e,
	0x92, 0x3b, 0xa9, 0xf3, 0xa0, 0x7d, 0x12, 0x15, 0x11, 0x2f, 0x5f, 0x94, 0x5d, 0x51, 0x4e, 0xea,
	0xfb, 0xd4, 0xc7, 0x4e, 0x92, 0x3d, 0x1f, 0xc9, 0xe1, 0x49, 0x58, 0xb0, 0x60, 0xef, 0xca, 0x3f,
	0x67, 0xe0, 0x29, 0x8e, 0x8d, 0xbe, 0x05, 0x30, 0x2f, 0x92, 0x07, 0x55, 0xa6, 0x25, 0xd4, 0x78,
	0xf8, 0x29, 0xd5, 0x99, 0x6a, 0x04, 0x6d, 0x4d, 0xff, 0xe2, 0xb7, 0x3f, 0xbf, 0x59, 0x2a, 0xa1,
	0x4b, 0xc6, 0x49, 0xb1, 0x71, 0x52, 0x6c, 0xc4, 0x32, 0x1d, 0xfd, 0x04, 0xe0, 0xd9, 0xd8, 0xf9,
	0x8b, 0x6e, 0x64, 0x6a, 0x9c, 0x1c, 0x0f, 0xca, 0xcd, 0xf9, 0x8a, 0x25, 0xfd, 0x6b, 0x9c, 0x7e,
	0x05, 0x5d, 0x99, 0x46, 0x5f, 0x7e, 0x6e, 0x85, 0xc7, 0xfc, 0x3e, 0x80, 0xcf, 0xc5, 0x93, 0x04,
	0x65, 0x23, 0x93, 0x92, 0x74, 0xca, 0xfa, 0x9c, 0xd5, 0x52, 0xcb, 0x1b, 0x5c, 0x4b, 0x15, 0x95,
	0xa7, 0x69, 0xe9, 0x8c, 0x89, 0x39, 0x04, 0xf0, 0xdc, 0xd8, 0xb9, 0x8e, 0xb2, 0xf1, 0x49, 0x4b,
	0x27, 0xe5, 0xd6, 0xbc, 0xe5, 0x52, 0xcf, 0x26, 0xd7, 0x73, 0x0b, 0xdd, 0x9c, 0xa6, 0x87, 0x05,
	0x10, 0x5b, 0x41, 0x42, 0x18, 0xdb, 0x72, 0xf0, 0x77, 0xd0, 0xcf, 0x00, 0x9e, 0x8d, 0x9d, 0xd4,
	0x19, 0x37, 0x5c, 0x72, 0x28, 0x64, 0xdc, 0x70, 0x29, 0xe1, 0xa0, 0xdd, 0xe1, 0xa2, 0xae, 0xa3,
	0x6b, 0xd9, 0x45, 0x31, 0x8e, 0x60, 0x6c, 0xf3, 0xb3, 0x7e, 0x07, 0x1d, 0x01, 0x78, 0x3e, 0xe1,
	0xa0, 0x47, 0xb7, 0x67, 0x19, 0x84, 0x84, 0x33, 0x4a, 0xb9, 0x33, 0x3f, 0x80, 0x14, 0xf7, 0x26,
	0x17, 0x77, 0x1b, 0xad, 0x67, 0x9d, 0x26, 0x87, 0xa3, 0xc4, 0x15, 0x0e, 0x00, 0x7c, 0x3e, 0x39,
	0x47, 0x50, 0x3d, 0x13, 0xc7, 0x89, 0x51, 0xa5, 0x6c, 0x2c, 0x84, 0x31, 0xeb, 0x7b, 0xb4, 0x42,
	0x9c, 0xa8, 0x5a, 0xf4, 0x37, 0x80, 0x17, 0x12, 0xe3, 0x08, 0xd5, 0x66, 0x21, 0x98, 0x98, 0x84,
	0x4a, 0x7d, 0x11, 0x08, 0x29, 0xf1, 0x1d, 0x2e, 0x71, 0x03, 0xd5, 0x32, 0x4a, 0xa4, 0xdd, 0xf8,
	0xfb, 0x0c, 0x87, 0xf0, 0x17, 0x00, 0xcf, 0x8d, 0x45, 0x5f, 0xc6, 0xf3, 0x25, 0x2d, 0x53, 0x33,
	0x9e, 0x2f, 0xa9, 0x89, 0xab, 0xdd, 0xe0, 0xfa, 0x5e, 0x47, 0xd5, 0x69, 0xfa, 0xfc, 0x21, 0x44,
	0x54, 0x5b, 0xfd, 0xdd, 0xbd, 0x63, 0x15, 0x1c, 0x1c, 0xab, 0xe0, 0x8f, 0x63, 0x15, 0x7c, 0x3d,
	0x50, 0x73, 0x07, 0x03, 0x35, 0x77, 0x38, 0x50, 0x73, 0x1f, 0x97, 0x47, 0x7e, 0xd0, 0x26, 0x03,
	0x7f, 0x3e, 0x02, 0x3d, 0xfc, 0x7d, 0x6b, 0xe6, 0xf9, 0xdf, 0x8b, 0xea, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x1f, 0x40, 0x59, 0xa1, 0x98, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// VestingAccounts queries all the vesting accounts created from all sources
	VestingAccounts(ctx context.Context, in *QueryVestingAccountsRequest, opts ...grpc.CallOption) (*QueryVestingAccountsResponse, error)
	// QVestingAccounts queries all the vesting accounts created via qvesting module
	QVestingAccounts(ctx context.Context, in *QueryQVestingAccountsRequest, opts ...grpc.CallOption) (*QueryQVestingAccountsResponse, error)
	// SpendableBalances queries the spendable balance of all coins for a single account.
	SpendableBalances(ctx context.Context, in *QuerySpendableBalancesRequest, opts ...grpc.CallOption) (*QuerySpendableBalancesResponse, error)
	// SpendableSupply queries the total spendable supply for a given denom
	SpendableSupply(ctx context.Context, in *QuerySpendableSupplyRequest, opts ...grpc.CallOption) (*QuerySpendableSupplyResponse, error)
	// VestingLockedSupply queries the total vesting locked amount for a given denom
	VestingLockedSupply(ctx context.Context, in *QueryVestingLockedSupplyRequest, opts ...grpc.CallOption) (*QueryVestingLockedSupplyResponse, error)
	// DelegationLockedSupply queries the total delegated supply across all delegations for the staking denom
	DelegationLockedSupply(ctx context.Context, in *QueryDelegationLockedSupplyRequest, opts ...grpc.CallOption) (*QueryDelegationLockedSupplyResponse, error)
	// DelegatorLockedSupply queries the total delegated supply across all delegations for the staking denom
	DelegatorLockedSupply(ctx context.Context, in *QueryDelegatorLockedSupplyRequest, opts ...grpc.CallOption) (*QueryDelegatorLockedSupplyResponse, error)
	// TotalLockedSupply queries the total locked supply across all vesting and delegations for the staking denom
	TotalLockedSupply(ctx context.Context, in *QueryTotalLockedSupplyRequest, opts ...grpc.CallOption) (*QueryTotalLockedSupplyResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qvesting.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VestingAccounts(ctx context.Context, in *QueryVestingAccountsRequest, opts ...grpc.CallOption) (*QueryVestingAccountsResponse, error) {
	out := new(QueryVestingAccountsResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qvesting.Query/VestingAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QVestingAccounts(ctx context.Context, in *QueryQVestingAccountsRequest, opts ...grpc.CallOption) (*QueryQVestingAccountsResponse, error) {
	out := new(QueryQVestingAccountsResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qvesting.Query/QVestingAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpendableBalances(ctx context.Context, in *QuerySpendableBalancesRequest, opts ...grpc.CallOption) (*QuerySpendableBalancesResponse, error) {
	out := new(QuerySpendableBalancesResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qvesting.Query/SpendableBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpendableSupply(ctx context.Context, in *QuerySpendableSupplyRequest, opts ...grpc.CallOption) (*QuerySpendableSupplyResponse, error) {
	out := new(QuerySpendableSupplyResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qvesting.Query/SpendableSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VestingLockedSupply(ctx context.Context, in *QueryVestingLockedSupplyRequest, opts ...grpc.CallOption) (*QueryVestingLockedSupplyResponse, error) {
	out := new(QueryVestingLockedSupplyResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qvesting.Query/VestingLockedSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationLockedSupply(ctx context.Context, in *QueryDelegationLockedSupplyRequest, opts ...grpc.CallOption) (*QueryDelegationLockedSupplyResponse, error) {
	out := new(QueryDelegationLockedSupplyResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qvesting.Query/DelegationLockedSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorLockedSupply(ctx context.Context, in *QueryDelegatorLockedSupplyRequest, opts ...grpc.CallOption) (*QueryDelegatorLockedSupplyResponse, error) {
	out := new(QueryDelegatorLockedSupplyResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qvesting.Query/DelegatorLockedSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalLockedSupply(ctx context.Context, in *QueryTotalLockedSupplyRequest, opts ...grpc.CallOption) (*QueryTotalLockedSupplyResponse, error) {
	out := new(QueryTotalLockedSupplyResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.qvesting.Query/TotalLockedSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// VestingAccounts queries all the vesting accounts created from all sources
	VestingAccounts(context.Context, *QueryVestingAccountsRequest) (*QueryVestingAccountsResponse, error)
	// QVestingAccounts queries all the vesting accounts created via qvesting module
	QVestingAccounts(context.Context, *QueryQVestingAccountsRequest) (*QueryQVestingAccountsResponse, error)
	// SpendableBalances queries the spendable balance of all coins for a single account.
	SpendableBalances(context.Context, *QuerySpendableBalancesRequest) (*QuerySpendableBalancesResponse, error)
	// SpendableSupply queries the total spendable supply for a given denom
	SpendableSupply(context.Context, *QuerySpendableSupplyRequest) (*QuerySpendableSupplyResponse, error)
	// VestingLockedSupply queries the total vesting locked amount for a given denom
	VestingLockedSupply(context.Context, *QueryVestingLockedSupplyRequest) (*QueryVestingLockedSupplyResponse, error)
	// DelegationLockedSupply queries the total delegated supply across all delegations for the staking denom
	DelegationLockedSupply(context.Context, *QueryDelegationLockedSupplyRequest) (*QueryDelegationLockedSupplyResponse, error)
	// DelegatorLockedSupply queries the total delegated supply across all delegations for the staking denom
	DelegatorLockedSupply(context.Context, *QueryDelegatorLockedSupplyRequest) (*QueryDelegatorLockedSupplyResponse, error)
	// TotalLockedSupply queries the total locked supply across all vesting and delegations for the staking denom
	TotalLockedSupply(context.Context, *QueryTotalLockedSupplyRequest) (*QueryTotalLockedSupplyResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) VestingAccounts(ctx context.Context, req *QueryVestingAccountsRequest) (*QueryVestingAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VestingAccounts not implemented")
}
func (*UnimplementedQueryServer) QVestingAccounts(ctx context.Context, req *QueryQVestingAccountsRequest) (*QueryQVestingAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QVestingAccounts not implemented")
}
func (*UnimplementedQueryServer) SpendableBalances(ctx context.Context, req *QuerySpendableBalancesRequest) (*QuerySpendableBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpendableBalances not implemented")
}
func (*UnimplementedQueryServer) SpendableSupply(ctx context.Context, req *QuerySpendableSupplyRequest) (*QuerySpendableSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpendableSupply not implemented")
}
func (*UnimplementedQueryServer) VestingLockedSupply(ctx context.Context, req *QueryVestingLockedSupplyRequest) (*QueryVestingLockedSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VestingLockedSupply not implemented")
}
func (*UnimplementedQueryServer) DelegationLockedSupply(ctx context.Context, req *QueryDelegationLockedSupplyRequest) (*QueryDelegationLockedSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationLockedSupply not implemented")
}
func (*UnimplementedQueryServer) DelegatorLockedSupply(ctx context.Context, req *QueryDelegatorLockedSupplyRequest) (*QueryDelegatorLockedSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorLockedSupply not implemented")
}
func (*UnimplementedQueryServer) TotalLockedSupply(ctx context.Context, req *QueryTotalLockedSupplyRequest) (*QueryTotalLockedSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalLockedSupply not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qvesting.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VestingAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVestingAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VestingAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qvesting.Query/VestingAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VestingAccounts(ctx, req.(*QueryVestingAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QVestingAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQVestingAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QVestingAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qvesting.Query/QVestingAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QVestingAccounts(ctx, req.(*QueryQVestingAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpendableBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpendableBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpendableBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qvesting.Query/SpendableBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpendableBalances(ctx, req.(*QuerySpendableBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpendableSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpendableSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpendableSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qvesting.Query/SpendableSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpendableSupply(ctx, req.(*QuerySpendableSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VestingLockedSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVestingLockedSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VestingLockedSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qvesting.Query/VestingLockedSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VestingLockedSupply(ctx, req.(*QueryVestingLockedSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationLockedSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegationLockedSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationLockedSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qvesting.Query/DelegationLockedSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationLockedSupply(ctx, req.(*QueryDelegationLockedSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorLockedSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorLockedSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorLockedSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qvesting.Query/DelegatorLockedSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorLockedSupply(ctx, req.(*QueryDelegatorLockedSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalLockedSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalLockedSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalLockedSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.qvesting.Query/TotalLockedSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalLockedSupply(ctx, req.(*QueryTotalLockedSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quasarlabs.quasarnode.qvesting.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "VestingAccounts",
			Handler:    _Query_VestingAccounts_Handler,
		},
		{
			MethodName: "QVestingAccounts",
			Handler:    _Query_QVestingAccounts_Handler,
		},
		{
			MethodName: "SpendableBalances",
			Handler:    _Query_SpendableBalances_Handler,
		},
		{
			MethodName: "SpendableSupply",
			Handler:    _Query_SpendableSupply_Handler,
		},
		{
			MethodName: "VestingLockedSupply",
			Handler:    _Query_VestingLockedSupply_Handler,
		},
		{
			MethodName: "DelegationLockedSupply",
			Handler:    _Query_DelegationLockedSupply_Handler,
		},
		{
			MethodName: "DelegatorLockedSupply",
			Handler:    _Query_DelegatorLockedSupply_Handler,
		},
		{
			MethodName: "TotalLockedSupply",
			Handler:    _Query_TotalLockedSupply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qvesting/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVestingAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVestingAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVestingAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVestingAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVestingAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVestingAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryQVestingAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQVestingAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQVestingAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQVestingAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQVestingAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQVestingAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpendableBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpendableBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpendableBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpendableBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpendableBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpendableBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpendableSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpendableSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpendableSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpendableSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpendableSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpendableSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVestingLockedSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVestingLockedSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVestingLockedSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVestingLockedSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVestingLockedSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVestingLockedSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegationLockedSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationLockedSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationLockedSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDelegationLockedSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationLockedSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationLockedSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorLockedSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorLockedSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorLockedSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorLockedSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorLockedSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorLockedSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalLockedSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLockedSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLockedSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalLockedSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLockedSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLockedSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVestingAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVestingAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQVestingAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQVestingAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpendableBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpendableBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpendableSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpendableSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVestingLockedSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVestingLockedSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegationLockedSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDelegationLockedSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegatorLockedSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorLockedSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalLockedSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalLockedSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVestingAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVestingAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVestingAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVestingAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVestingAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVestingAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &types.Any{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQVestingAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQVestingAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQVestingAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQVestingAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQVestingAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQVestingAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &types.Any{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpendableBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpendableBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpendableBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpendableBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpendableBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpendableBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, types1.Coin{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpendableSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpendableSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpendableSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpendableSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpendableSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpendableSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVestingLockedSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVestingLockedSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVestingLockedSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVestingLockedSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVestingLockedSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVestingLockedSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationLockedSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationLockedSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationLockedSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationLockedSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationLockedSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationLockedSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorLockedSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorLockedSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorLockedSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorLockedSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorLockedSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorLockedSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLockedSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLockedSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLockedSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLockedSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLockedSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLockedSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
