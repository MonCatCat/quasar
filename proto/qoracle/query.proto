syntax = "proto3";
package quasarlabs.quasarnode.qoracle;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "qoracle/params.proto";
import "qoracle/bandchain.proto";
import "qoracle/osmosis.proto";
import "osmosis/epochs/genesis.proto";
import "osmosis/mint/v1beta1/mint.proto";
import "osmosis/pool-incentives/v1beta1/incentives.proto";
import "osmosis/pool-incentives/v1beta1/query.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/quasarlabs/quasarnode/x/qoracle/types";

// Query defines the gRPC querier service.
service Query {
// Parameters queries the parameters of the module.
	rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/params";
	}

// Queries a list of State items.
	rpc State(QueryStateRequest) returns (QueryStateResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/state";
	}

// Queries a list of OraclePrices items.
	rpc OraclePrices(QueryOraclePricesRequest) returns (QueryOraclePricesResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/oracle_prices";
	}

// Queries a list of OsmosisChainParams items.
	rpc OsmosisChainParams(QueryOsmosisChainParamsRequest) returns (QueryOsmosisChainParamsResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/osmosis/chain_params";
	}

// Queries a list of OsmosisIncentivizedPools items.
	rpc OsmosisIncentivizedPools(QueryOsmosisIncentivizedPoolsRequest) returns (QueryOsmosisIncentivizedPoolsResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/osmosis/incentivized_pools";
	}

// Queries a list of OsmosisPools items.
	rpc OsmosisPools(QueryOsmosisPoolsRequest) returns (QueryOsmosisPoolsResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/osmosis/pools";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryStateRequest {
}

message QueryStateResponse {
	OracleScriptState coin_rates_state = 1 [(gogoproto.nullable) = false];
	OsmosisRequestState osmosis_params_request_state = 2 [(gogoproto.nullable) = false];
	OsmosisRequestState osmosis_incentivized_pools_state = 3 [(gogoproto.nullable) = false];
	OsmosisRequestState osmosis_pools_state = 4 [(gogoproto.nullable) = false];
}

message QueryOraclePricesRequest {
}

message QueryOraclePricesResponse {
	repeated cosmos.base.v1beta1.DecCoin prices = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];
  	int64 updated_at_height = 2;
}

message QueryOsmosisChainParamsRequest {
}

message QueryOsmosisChainParamsResponse {
	repeated osmosis.epochs.v1beta1.EpochInfo epochs_info = 1 [(gogoproto.nullable) = false];
	repeated int64 lockable_durations = 2 [(gogoproto.casttype) = "time.Duration"];
	osmosis.mint.v1beta1.Params mint_params = 3 [(gogoproto.nullable) = false];
	bytes mint_epoch_provisions = 4 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
	osmosis.poolincentives.v1beta1.DistrInfo distr_info = 5 [(gogoproto.nullable) = false];
}

message QueryOsmosisIncentivizedPoolsRequest {
}

message QueryOsmosisIncentivizedPoolsResponse {
	repeated osmosis.poolincentives.v1beta1.IncentivizedPool incentivized_pools = 1 [(gogoproto.nullable) = false];
}

message QueryOsmosisPoolsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryOsmosisPoolsResponse {
	repeated OsmosisPool pools = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
