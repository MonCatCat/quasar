syntax = "proto3";
package quasarlabs.quasarnode.qoracle;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "qoracle/params.proto";
import "qoracle/pool.proto";

option go_package = "github.com/quasarlabs/quasarnode/x/qoracle/types";

// Query defines the gRPC querier service.
service Query {
	// Params queries the parameters of the module.
	rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/params";
	}

	// DenomPrices queries list of denom prices.
	rpc DenomPrices(QueryDenomPricesRequest) returns (QueryDenomPricesResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/denom_prices";
	}

	// Pools queries the pools from collected from pool oracles.
	rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/pools";
	}
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryDenomPricesRequest is request type for the Query/DenomPrices RPC method.
message QueryDenomPricesRequest {
	// pagination defines an optional pagination for the request.
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryDenomPricesResponse is response type for the Query/DenomPrices RPC method.
message QueryDenomPricesResponse {
	repeated cosmos.base.v1beta1.DecCoin prices = 1 [(gogoproto.nullable) = false];
	google.protobuf.Timestamp updated_at = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
	// pagination defines the pagination in the response.
	cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

// QueryPoolsRequest is request type for the Query/Pools RPC method.
message QueryPoolsRequest {
	// source filters the pools by their source chain. If empty, pools with any source returned.
	string source = 1;
	// denom filters the pools by their denom. If empty, pools with any denom returned.
	string denom = 2;
	// pagination defines an optional pagination for the request.
	cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryPoolsResponse is response type for the Query/Pools RPC method.
message QueryPoolsResponse {
	repeated Pool pools = 1 [(gogoproto.nullable) = false];
	// pagination defines the pagination in the response.
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}