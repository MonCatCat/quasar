openapi: 3.0.0
info:
  title: Quasar - GRPC Gateway Docs
  description: A REST interface for state queries, legacy transactions
  version: 1.0.0
paths:
  /quasarlabs/epochs/v1beta1/current_epoch:
    get:
      summary: CurrentEpoch provide current epoch of specified identifier
      operationId: CurrentEpoch
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  current_epoch:
                    type: string
                    format: int64
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: identifier
          in: query
          required: false
          schema:
            type: string
      tags:
        - Query
  /quasarlabs/epochs/v1beta1/epochs:
    get:
      summary: EpochInfos provide running epochInfos
      operationId: EpochInfos
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  epochs:
                    type: array
                    items:
                      type: object
                      properties:
                        identifier:
                          type: string
                        start_time:
                          type: string
                          format: date-time
                        duration:
                          type: string
                        current_epoch:
                          type: string
                          format: int64
                        current_epoch_start_time:
                          type: string
                          format: date-time
                        epoch_counting_started:
                          type: boolean
                        current_epoch_start_height:
                          type: string
                          format: int64
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      tags:
        - Query
  /quasarlabs/quasarnode/qoracle/params:
    get:
      summary: Params queries the parameters of the module.
      operationId: QOracleParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      tags:
        - Query
  /quasarlabs/quasarnode/qoracle/pools:
    get:
      summary: Pools queries the pools collected from pool oracles.
      operationId: Pools
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  pools:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        assets:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements the custom method

                              signatures required by gogoproto.
                        tvl:
                          type: string
                          format: byte
                        apy:
                          type: string
                          format: byte
                        raw:
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must contain at least

                                one "/" character. The last segment of the URL's path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the binary all types that they

                                expect it to use in the context of Any. However, for URLs which use the

                                scheme `http`, `https`, or no scheme, one can optionally set up a type

                                server that maps type URLs to message definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently available in the official

                                protobuf release, and it is not used for type URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty scheme) might be

                                used with implementation specific semantics.
                            value:
                              type: string
                              format: byte
                              description: Must be a valid serialized protocol buffer of the above specified
                                type.
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized message.


                            Protobuf library provides support to pack/unpack Any values in the form

                            of utility functions or additional generated methods of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                            Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                            Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will by default use

                            'type.googleapis.com/full.type.name' as the type URL and the unpack

                            methods only use the fully qualified type name after the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z" will yield type

                            name "y.z".



                            JSON


                            The JSON representation of an `Any` value uses the regular

                            representation of the deserialized, embedded message, with an

                            additional field `@type` which contains the type URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a custom JSON

                            representation, that representation will be embedded adding a field

                            `value` which holds the custom JSON in addition to the `@type`

                            field. Example (for message [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                        updated_at:
                          type: string
                          format: date-time
                      description: Pool defines the generalized structure of a liquidity pool coming
                        from any source chain to qoracle.
                  pagination:
                    description: pagination defines the pagination in the response.
                    type: object
                    properties:
                      next_key:
                        type: string
                        format: byte
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty if

                          there are no more results.
                      total:
                        type: string
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                description: QueryPoolsResponse is response type for the Query/Pools RPC method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: denom
          description: denom filters the pools by their denom. If empty, pools with any
            denom returned.
          in: query
          required: false
          schema:
            type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key should

            be set.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in UIs.

            count_total is only respected when offset is used. It is ignored when key

            is set.
          in: query
          required: false
          schema:
            type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Query
  /quasarlabs/quasarnode/qvesting/accounts:
    get:
      summary: VestingAccounts returns all the existing vesting accounts
      operationId: VestingAccounts
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  accounts:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    title: accounts are the existing vesting accounts
                  pagination:
                    description: pagination defines the pagination in the response.
                    type: object
                    properties:
                      next_key:
                        type: string
                        format: byte
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty if

                          there are no more results.
                      total:
                        type: string
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                description: QueryVestingAccountsResponse is the response type for the
                  Query/Accounts RPC method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key should

            be set.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in UIs.

            count_total is only respected when offset is used. It is ignored when key

            is set.
          in: query
          required: false
          schema:
            type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Query
  "/quasarlabs/quasarnode/qvesting/locked_supply/{denom}":
    get:
      summary: VestingAccounts returns all the existing vesting accounts
      operationId: VestingLockedSupply
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  amount:
                    description: amount is the supply of the coin.
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                description: QueryVestingAccountsResponse is the response type for the
                  Query/VestingLockedSupply RPC method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: denom
          description: denom is the coin denom to query locked supply for.
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  /quasarlabs/quasarnode/qvesting/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: QVestingParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      tags:
        - Query
  "/quasarlabs/quasarnode/qvesting/spendable_balances/{address}":
    get:
      summary: SpendableBalances queries the spenable balance of all coins for a
        single account.
      operationId: SpendableBalances
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  balances:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the custom method

                        signatures required by gogoproto.
                    description: balances is the spendable balances of all the coins.
                  pagination:
                    description: pagination defines the pagination in the response.
                    type: object
                    properties:
                      next_key:
                        type: string
                        format: byte
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty if

                          there are no more results.
                      total:
                        type: string
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                description: >-
                  QuerySpendableBalancesResponse defines the gRPC response
                  structure for querying

                  an account's spendable balances.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: address
          description: address is the address to query spendable balances for.
          in: path
          required: true
          schema:
            type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key should

            be set.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in UIs.

            count_total is only respected when offset is used. It is ignored when key

            is set.
          in: query
          required: false
          schema:
            type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Query
  "/quasarlabs.quasarnode.tokenfactory.v1beta1/denoms/{denom}/authority_metadata":
    get:
      summary: |-
        DenomAuthorityMetadata defines a gRPC query method for fetching
        DenomAuthorityMetadata for a particular denom.
      operationId: DenomAuthorityMetadata
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  authority_metadata:
                    type: object
                    properties:
                      admin:
                        type: string
                        title: Can be empty for no admin, or a valid osmosis address
                    description: >-
                      DenomAuthorityMetadata specifies metadata for addresses
                      that have specific

                      capabilities over a token factory denom. Right now there is only one Admin

                      permission, but is planned to be extended to the future.
                description: >-
                  QueryDenomAuthorityMetadataResponse defines the response
                  structure for the

                  DenomAuthorityMetadata gRPC query.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: denom
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  "/quasarlabs.quasarnode.tokenfactory.v1beta1/denoms_from_creator/{creator}":
    get:
      summary: |-
        DenomsFromCreator defines a gRPC query method for fetching all
        denominations created by a specific admin/creator.
      operationId: DenomsFromCreator
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  denoms:
                    type: array
                    items:
                      type: string
                description: >-
                  QueryDenomsFromCreatorRequest defines the response structure
                  for the

                  DenomsFromCreator gRPC query.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: creator
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  /quasarlabs.quasarnode.tokenfactory.v1beta1/params:
    get:
      summary: >-
        Params defines a gRPC query method that returns the tokenfactory
        module's

        parameters.
      operationId: TokenfactoryParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params defines the parameters of the module.
                    type: object
                    properties:
                      denom_creation_fee:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements the custom method

                            signatures required by gogoproto.
                      denom_creation_gas_consume:
                        type: string
                        format: uint64
                        title: >-
                          if denom_creation_fee is an empty array, then this
                          field is used to add more gas consumption

                          to the base cost.

                          https://github.com/CosmWasm/token-factory/issues/11
                description: QueryParamsResponse is the response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      tags:
        - Query
components:
  schemas:
    google.protobuf.Any:
      type: object
      properties:
        type_url:
          type: string
          description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that they

            expect it to use in the context of Any. However, for URLs which use the

            scheme `http`, `https`, or no scheme, one can optionally set up a type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
        value:
          type: string
          format: byte
          description: Must be a valid serialized protocol buffer of the above specified
            type.
      description: >-
        `Any` contains an arbitrary serialized protocol buffer message along
        with a

        URL that describes the type of the serialized message.


        Protobuf library provides support to pack/unpack Any values in the form

        of utility functions or additional generated methods of the Any type.


        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

        Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

        Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use

        'type.googleapis.com/full.type.name' as the type URL and the unpack

        methods only use the fully qualified type name after the last '/'

        in the type URL, for example "foo.bar.com/x/y.z" will yield type

        name "y.z".



        JSON


        The JSON representation of an `Any` value uses the regular

        representation of the deserialized, embedded message, with an

        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON

        representation, that representation will be embedded adding a field

        `value` which holds the custom JSON in addition to the `@type`

        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    grpc.gateway.runtime.Error:
      type: object
      properties:
        error:
          type: string
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all types that they

                  expect it to use in the context of Any. However, for URLs which use the

                  scheme `http`, `https`, or no scheme, one can optionally set up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the official

                  protobuf release, and it is not used for type URLs beginning with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: Must be a valid serialized protocol buffer of the above specified
                  type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the form

              of utility functions or additional generated methods of the Any type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
    quasarlabs.quasarnode.epochs.EpochInfo:
      type: object
      properties:
        identifier:
          type: string
        start_time:
          type: string
          format: date-time
        duration:
          type: string
        current_epoch:
          type: string
          format: int64
        current_epoch_start_time:
          type: string
          format: date-time
        epoch_counting_started:
          type: boolean
        current_epoch_start_height:
          type: string
          format: int64
    quasarlabs.quasarnode.epochs.QueryCurrentEpochResponse:
      type: object
      properties:
        current_epoch:
          type: string
          format: int64
    quasarlabs.quasarnode.epochs.QueryEpochsInfoResponse:
      type: object
      properties:
        epochs:
          type: array
          items:
            type: object
            properties:
              identifier:
                type: string
              start_time:
                type: string
                format: date-time
              duration:
                type: string
              current_epoch:
                type: string
                format: int64
              current_epoch_start_time:
                type: string
                format: date-time
              epoch_counting_started:
                type: boolean
              current_epoch_start_height:
                type: string
                format: int64
    cosmos.base.query.v1beta1.PageRequest:
      type: object
      properties:
        key:
          type: string
          format: byte
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
        offset:
          type: string
          format: uint64
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key should

            be set.
        limit:
          type: string
          format: uint64
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
        count_total:
          type: boolean
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in UIs.

            count_total is only respected when offset is used. It is ignored when key

            is set.
        reverse:
          type: boolean
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
      description: |-
        message SomeRequest {
                 Foo some_parameter = 1;
                 PageRequest pagination = 2;
         }
      title: |-
        PageRequest is to be embedded in gRPC request messages for efficient
        pagination. Ex:
    cosmos.base.query.v1beta1.PageResponse:
      type: object
      properties:
        next_key:
          type: string
          format: byte
          description: |-
            next_key is the key to be passed to PageRequest.key to
            query the next page most efficiently. It will be empty if
            there are no more results.
        total:
          type: string
          format: uint64
          title: >-
            total is total number of results available if
            PageRequest.count_total

            was set, its value is undefined otherwise
      description: |-
        PageResponse is to be embedded in gRPC response messages where the
        corresponding request message has used PageRequest.

         message SomeResponse {
                 repeated Bar results = 1;
                 PageResponse page = 2;
         }
    cosmos.base.v1beta1.Coin:
      type: object
      properties:
        denom:
          type: string
        amount:
          type: string
      description: |-
        Coin defines a token with a denomination and an amount.

        NOTE: The amount field is an Int which implements the custom method
        signatures required by gogoproto.
    quasarlabs.quasarnode.qoracle.Params:
      type: object
      description: Params defines the parameters for the module.
    quasarlabs.quasarnode.qoracle.Pool:
      type: object
      properties:
        id:
          type: string
        assets:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom method

              signatures required by gogoproto.
        tvl:
          type: string
          format: byte
        apy:
          type: string
          format: byte
        raw:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types that they

                expect it to use in the context of Any. However, for URLs which use the

                scheme `http`, `https`, or no scheme, one can optionally set up a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official

                protobuf release, and it is not used for type URLs beginning with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: Must be a valid serialized protocol buffer of the above specified
                type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the form

            of utility functions or additional generated methods of the Any type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        updated_at:
          type: string
          format: date-time
      description: Pool defines the generalized structure of a liquidity pool coming
        from any source chain to qoracle.
    quasarlabs.quasarnode.qoracle.QueryParamsResponse:
      type: object
      properties:
        params:
          description: params holds all the parameters of this module.
          type: object
      description: QueryParamsResponse is response type for the Query/Params RPC method.
    quasarlabs.quasarnode.qoracle.QueryPoolsResponse:
      type: object
      properties:
        pools:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              assets:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom method

                    signatures required by gogoproto.
              tvl:
                type: string
                format: byte
              apy:
                type: string
                format: byte
              raw:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all types that they

                      expect it to use in the context of Any. However, for URLs which use the

                      scheme `http`, `https`, or no scheme, one can optionally set up a type

                      server that maps type URLs to message definitions as follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the official

                      protobuf release, and it is not used for type URLs beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme) might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: Must be a valid serialized protocol buffer of the above specified
                      type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in the form

                  of utility functions or additional generated methods of the Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default use

                  'type.googleapis.com/full.type.name' as the type URL and the unpack

                  methods only use the fully qualified type name after the last '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield type

                  name "y.z".



                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom JSON

                  representation, that representation will be embedded adding a field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              updated_at:
                type: string
                format: date-time
            description: Pool defines the generalized structure of a liquidity pool coming
              from any source chain to qoracle.
        pagination:
          description: pagination defines the pagination in the response.
          type: object
          properties:
            next_key:
              type: string
              format: byte
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
            total:
              type: string
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
      description: QueryPoolsResponse is response type for the Query/Pools RPC method.
    quasarlabs.quasarnode.qvesting.Params:
      type: object
      description: Params defines the parameters for the module.
    quasarlabs.quasarnode.qvesting.QueryParamsResponse:
      type: object
      properties:
        params:
          description: params holds all the parameters of this module.
          type: object
      description: QueryParamsResponse is response type for the Query/Params RPC method.
    quasarlabs.quasarnode.qvesting.QuerySpendableBalancesResponse:
      type: object
      properties:
        balances:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom method

              signatures required by gogoproto.
          description: balances is the spendable balances of all the coins.
        pagination:
          description: pagination defines the pagination in the response.
          type: object
          properties:
            next_key:
              type: string
              format: byte
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
            total:
              type: string
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
      description: >-
        QuerySpendableBalancesResponse defines the gRPC response structure for
        querying

        an account's spendable balances.
    quasarlabs.quasarnode.qvesting.QueryVestingAccountsResponse:
      type: object
      properties:
        accounts:
          type: array
          items:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all types that they

                  expect it to use in the context of Any. However, for URLs which use the

                  scheme `http`, `https`, or no scheme, one can optionally set up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the official

                  protobuf release, and it is not used for type URLs beginning with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: Must be a valid serialized protocol buffer of the above specified
                  type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the form

              of utility functions or additional generated methods of the Any type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          title: accounts are the existing vesting accounts
        pagination:
          description: pagination defines the pagination in the response.
          type: object
          properties:
            next_key:
              type: string
              format: byte
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
            total:
              type: string
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
      description: QueryVestingAccountsResponse is the response type for the
        Query/Accounts RPC method.
    quasarlabs.quasarnode.qvesting.QueryVestingLockedSupplyResponse:
      type: object
      properties:
        amount:
          description: amount is the supply of the coin.
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
      description: QueryVestingAccountsResponse is the response type for the
        Query/VestingLockedSupply RPC method.
    quasarlabs.quasarnode.tokenfactory.v1beta1.DenomAuthorityMetadata:
      type: object
      properties:
        admin:
          type: string
          title: Can be empty for no admin, or a valid osmosis address
      description: >-
        DenomAuthorityMetadata specifies metadata for addresses that have
        specific

        capabilities over a token factory denom. Right now there is only one Admin

        permission, but is planned to be extended to the future.
    quasarlabs.quasarnode.tokenfactory.v1beta1.Params:
      type: object
      properties:
        denom_creation_fee:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom method

              signatures required by gogoproto.
        denom_creation_gas_consume:
          type: string
          format: uint64
          title: >-
            if denom_creation_fee is an empty array, then this field is used to
            add more gas consumption

            to the base cost.

            https://github.com/CosmWasm/token-factory/issues/11
      description: Params defines the parameters for the tokenfactory module.
    quasarlabs.quasarnode.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse:
      type: object
      properties:
        authority_metadata:
          type: object
          properties:
            admin:
              type: string
              title: Can be empty for no admin, or a valid osmosis address
          description: >-
            DenomAuthorityMetadata specifies metadata for addresses that have
            specific

            capabilities over a token factory denom. Right now there is only one Admin

            permission, but is planned to be extended to the future.
      description: >-
        QueryDenomAuthorityMetadataResponse defines the response structure for
        the

        DenomAuthorityMetadata gRPC query.
    quasarlabs.quasarnode.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse:
      type: object
      properties:
        denoms:
          type: array
          items:
            type: string
      description: |-
        QueryDenomsFromCreatorRequest defines the response structure for the
        DenomsFromCreator gRPC query.
    quasarlabs.quasarnode.tokenfactory.v1beta1.QueryParamsResponse:
      type: object
      properties:
        params:
          description: params defines the parameters of the module.
          type: object
          properties:
            denom_creation_fee:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom method

                  signatures required by gogoproto.
            denom_creation_gas_consume:
              type: string
              format: uint64
              title: >-
                if denom_creation_fee is an empty array, then this field is used
                to add more gas consumption

                to the base cost.

                https://github.com/CosmWasm/token-factory/issues/11
      description: QueryParamsResponse is the response type for the Query/Params RPC method.
